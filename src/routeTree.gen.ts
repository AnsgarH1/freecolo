/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SetupRouteImport } from './routes/setup'
import { Route as GameRouteImport } from './routes/game'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GameResultsRouteImport } from './routes/game/results'

const SetupRoute = SetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const GameRoute = GameRouteImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GameResultsRoute = GameResultsRouteImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => GameRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/game': typeof GameRouteWithChildren
  '/setup': typeof SetupRoute
  '/game/results': typeof GameResultsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/game': typeof GameRouteWithChildren
  '/setup': typeof SetupRoute
  '/game/results': typeof GameResultsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/game': typeof GameRouteWithChildren
  '/setup': typeof SetupRoute
  '/game/results': typeof GameResultsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/game' | '/setup' | '/game/results'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/game' | '/setup' | '/game/results'
  id: '__root__' | '/' | '/game' | '/setup' | '/game/results'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GameRoute: typeof GameRouteWithChildren
  SetupRoute: typeof SetupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game': {
      id: '/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/results': {
      id: '/game/results'
      path: '/results'
      fullPath: '/game/results'
      preLoaderRoute: typeof GameResultsRouteImport
      parentRoute: typeof GameRoute
    }
  }
}

interface GameRouteChildren {
  GameResultsRoute: typeof GameResultsRoute
}

const GameRouteChildren: GameRouteChildren = {
  GameResultsRoute: GameResultsRoute,
}

const GameRouteWithChildren = GameRoute._addFileChildren(GameRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GameRoute: GameRouteWithChildren,
  SetupRoute: SetupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
